import{_ as d,d as c,o as n,c as l,a as e,w as o,v as r,j as p,f as a}from"./index.ee2f944b.js";import{e as h}from"./elliptic.ff7c069c.js";import"./_commonjsHelpers.dffb1198.js";const y=new h.ec("secp256k1"),u=()=>({publicKey:"",input:"",signature:"",isSignatureValid:!1}),f=c({name:"VerifySignature",data:u,watch:{publicKey(){this.reVerify()},input(){this.reVerify()},signature(){this.reVerify()}},methods:{reset(){Object.assign(this.$data,u())},reVerify(){try{const t=y.keyFromPublic(this.publicKey,"hex");this.isSignatureValid=t.verify(this.input,this.signature)}catch{this.isSignatureValid=!1}}}}),_={class:"section py-0"},g={class:"columns is-multiline is-vcentered"},m=e("div",{class:"column"},[e("p",{class:"title"},"Verify Signature")],-1),v={class:"column is-narrow"},b={class:"column is-full"},V={class:"box"},k=e("p",{class:"subtitle mb-0"},"Instructions",-1),w=e("div",{class:"content"},[e("ul",null,[e("li",null," Enter a message and signature to verify if it is signed by the corresponding private key of the given public key! "),e("li",null," Once verified, you know that the message is authentic and actually came from the person who owns the corresponding private key to the given public key. ")])],-1),S=e("hr",null,null,-1),K=a(" Enter a public key in hexadecimal "),$=e("br",null,null,-1),E=e("br",null,null,-1),x=a(" Enter your data "),C=e("br",null,null,-1),B=a(" Enter the signature you received for the input in hexadecimal "),F={key:0,class:"column is-full"},N={class:"box"},U=a(" Signature is: "),j={key:0,class:"has-text-success-dark"},A={key:1,class:"has-text-danger-dark"};function I(t,s,O,P,T,D){return n(),l("div",null,[e("div",_,[e("div",g,[m,e("div",v,[e("button",{class:"button is-light is-danger is-fullwidth",onClick:s[0]||(s[0]=(...i)=>t.reset&&t.reset(...i))}," Reset ")]),e("div",b,[e("div",V,[k,w,S,e("label",null,[K,o(e("input",{"onUpdate:modelValue":s[1]||(s[1]=i=>t.publicKey=i),type:"text",class:"input",placeholder:"Public Key",pattern:"[0-9a-fA-F]+$"},null,512),[[r,t.publicKey]])]),$,E,e("label",null,[x,o(e("textarea",{"onUpdate:modelValue":s[2]||(s[2]=i=>t.input=i),class:"textarea",placeholder:"Whatever data you want to sign or verify",rows:"2"},null,512),[[r,t.input]])]),C,e("label",null,[B,o(e("input",{"onUpdate:modelValue":s[3]||(s[3]=i=>t.signature=i),type:"text",class:"input",placeholder:"Signature",pattern:"[0-9a-fA-F]+$"},null,512),[[r,t.signature]])])])]),t.publicKey!==""&&t.signature!==""?(n(),l("div",F,[e("div",N,[U,t.isSignatureValid?(n(),l("span",j," Valid ")):(n(),l("span",A,"Invalid"))])])):p("",!0)])])])}var q=d(f,[["render",I]]);export{q as default};
