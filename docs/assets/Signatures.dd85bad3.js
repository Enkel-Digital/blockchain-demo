import{d as y,_ as g,r as c,o as i,c as r,a as e,h as S,i as w,t as u,f as n,w as d,v as h,n as p,j as l,l as K}from"./index.b8063d7f.js";import{e as _}from"./elliptic.ff7c069c.js";import{_ as C}from"./CopyOnClick.3b19aeda.js";import"./_commonjsHelpers.dffb1198.js";const V=new _.ec("secp256k1"),E=y({name:"SignatureCreate",components:{CopyOnClick:C},props:{secretKey:{type:String,required:!0},input:{type:String,required:!0}},data(){return{signature:""}},watch:{input(){this.updateSignature()}},created(){this.updateSignature()},methods:{updateSignature(){const t=V.keyFromPrivate(this.secretKey);this.signature=t.sign(this.input).toDER().map(s=>("0"+(s&255).toString(16)).slice(-2)).join("")}}}),P={class:"box"},A=e("p",{class:"title is-4 mb-1"},"Signature Created",-1),T={class:"mb-2"},B={class:"word-wrap"},F=e("p",null," This signature is created by signing the input using the secret / private key and can only be verified with the corresponding public key. ",-1),D=e("details",{class:"content mt-4"},[e("summary",{style:{cursor:"pointer"}},"More info"),e("ul",null,[e("li",null,"Signing is something build on Asymmetric Cryptography"),e("li",null," A signature may look like a Hash function's output but it is different. Because a hash function is a one-way function and so its output cannot be reversed back into its input! "),e("li",null,[n(" The digital signature algorithm used here is "),e("code",null,"ECDSA - Secp256k1"),n(", which is the algorithm (elliptic curve) used by Bitcoin and Ethereum to implement its public key cryptography ")])])],-1);function I(t,s,m,b,f,v){const a=c("CopyOnClick");return i(),r("div",P,[A,e("div",T,[S(a,{showIcon:!0,textToCopy:t.signature},{default:w(()=>[e("div",B,[e("code",null,u(t.signature),1)])]),_:1},8,["textToCopy"])]),F,D])}var q=g(E,[["render",I]]);const N=new _.ec("secp256k1"),O=y({name:"SignatureVerify",props:{publicKey:{type:String,required:!0},input:{type:String,required:!0}},data(){return{signature:"",isSignatureValid:!1}},watch:{input(){this.reVerify()},signature(){this.reVerify()}},methods:{reVerify(){try{const t=N.keyFromPublic(this.publicKey,"hex");this.isSignatureValid=t.verify(this.input,this.signature)}catch{this.isSignatureValid=!1}}}}),M={class:"box"},U=e("p",{class:"title is-4 mb-1"},"Signature Verification",-1),j=e("p",null," Type or paste in the signature below and it will check if your signature is valid ",-1),H=e("br",null,null,-1),R={key:0},z=n(" The given signature is "),G={key:0},W=e("b",{class:"has-text-success"},"valid",-1),J=n(" for the input above. "),L=[W,J],Q={key:1},X=e("b",{class:"has-text-danger"},"invalid",-1),Y=n(" for the input above. "),Z=[X,Y],x=e("details",{class:"content mt-4"},[e("summary",{style:{cursor:"pointer"}},"More info"),e("ul",null,[e("li",null,"Signing is something build on Asymmetric Cryptography"),e("li",null," A signature may look like a Hash function's output but it is different. Because a hash function is a one-way function and so its output cannot be reversed back into its input! "),e("li",null,[n(" The digital signature algorithm used here is "),e("code",null,"Secp256k1"),n(", which is the algorithm (elliptic curve) used by Bitcoin and Ethereum to implement its public key cryptography ")])])],-1);function ee(t,s,m,b,f,v){return i(),r("div",M,[U,j,H,d(e("input",{"onUpdate:modelValue":s[0]||(s[0]=a=>t.signature=a),type:"text",class:p(["input",{"is-success":t.isSignatureValid,"is-danger":t.signature.length!==0&&!t.isSignatureValid}]),placeholder:"Secret Key"},null,2),[[h,t.signature]]),t.signature.length!==0?(i(),r("span",R,[z,t.isSignatureValid?(i(),r("span",G,L)):(i(),r("span",Q,Z))])):l("",!0),x])}var te=g(O,[["render",ee]]);const k=new _.ec("secp256k1"),se=y({name:"Signatures",components:{SignatureCreate:q,SignatureVerify:te},data(){return{tab:void 0,inputKeys:void 0,publicKey:"",secretKey:"",input:""}},watch:{secretKey(){this.inputKeys&&this.useKey()}},methods:{reset(){},useInput(){this.inputKeys=!0,this.publicKey="",this.secretKey=""},useKey(){if(!this.secretKey||this.secretKey.length!==64||!/[0-9a-fA-F]+$/.test(this.secretKey))return;const t=k.keyFromPrivate(this.secretKey);this.publicKey=t.getPublic().encode("hex",!0)},generateKeys(){this.inputKeys=!1;const t=k.genKeyPair();this.publicKey=t.getPublic().encode("hex",!0),this.secretKey=t.getPrivate().toString("hex")}}}),ie={class:"section py-0"},ne={class:"columns is-multiline is-vcentered"},oe=e("div",{class:"column"},[e("p",{class:"title"},"Digital Signatures")],-1),re={class:"column is-narrow"},le={class:"column is-full"},ae={class:"box"},ue=e("p",{class:"subtitle mb-0"},"Keys",-1),ce=e("div",{class:"content"},[e("ul",null,[e("li",null,"A secret/public key pair is needed to run this demo"),e("li",null," Either click generate to create a new secret/public key pair for this demo "),e("li",null,"Or, click input to enter your own secret key")])],-1),de={class:"columns"},he={class:"column is-half"},pe={class:"column is-half"},ye={key:0},ge=e("hr",null,null,-1),_e=[ge],me={key:1},be=n(" Enter your 64 hexadecimal character secret key, the public key will be generated once secret key is entered. "),fe={key:0},ve={class:"mb-2"},Ke=n(" Private Key: "),ke={class:"word-wrap"},$e=n(" Public Key: "),Se={class:"word-wrap"},we={key:2},Ce={class:"mb-2"},Ve=n(" Private Key: "),Ee={class:"word-wrap"},Pe=n(" Public Key: "),Ae={class:"word-wrap"},Te=e("div",{class:"column is-full"},[e("hr")],-1),Be={key:0,class:"column is-full"},Fe={class:"columns is-multiline is-vcentered"},De={class:"column is-full"},Ie={class:"box"},qe=e("p",{class:"subtitle mb-2"},"Enter your data",-1),Ne=e("div",{class:"column is-full"},[e("hr")],-1),Oe={class:"column is-half"},Me={class:"column is-half"};function Ue(t,s,m,b,f,v){const a=c("SignatureCreate"),$=c("SignatureVerify");return i(),r("div",null,[e("div",ie,[e("div",ne,[oe,e("div",re,[e("button",{class:"button is-light is-danger is-fullwidth",onClick:s[0]||(s[0]=(...o)=>t.reset&&t.reset(...o))}," Reset ")]),e("div",le,[e("div",ae,[ue,ce,e("div",de,[e("div",he,[e("button",{class:"button is-warning is-light is-fullwidth",onClick:s[1]||(s[1]=(...o)=>t.useInput&&t.useInput(...o))}," Input ")]),e("div",pe,[e("button",{class:"button is-success is-light is-fullwidth",onClick:s[2]||(s[2]=(...o)=>t.generateKeys&&t.generateKeys(...o))}," Generate ")])]),t.inputKeys!==void 0?(i(),r("div",ye,_e)):l("",!0),t.inputKeys===!0?(i(),r("div",me,[e("label",null,[be,d(e("input",{"onUpdate:modelValue":s[3]||(s[3]=o=>t.secretKey=o),type:"text",class:"input",placeholder:"Secret Key",pattern:"[0-9a-fA-F]+$",minlength:"64",maxlength:"64"},null,512),[[h,t.secretKey]])]),t.secretKey.length===64&&/[0-9a-fA-F]+$/.test(t.secretKey)&&t.publicKey!==""?(i(),r("div",fe,[e("div",ve,[Ke,e("code",ke,u(t.secretKey),1)]),$e,e("code",Se,u(t.publicKey),1)])):l("",!0)])):t.inputKeys===!1?(i(),r("div",we,[e("div",Ce,[Ve,e("code",Ee,u(t.secretKey),1)]),Pe,e("code",Ae,u(t.publicKey),1)])):l("",!0)])]),Te,t.secretKey&&t.publicKey?(i(),r("div",Be,[e("div",Fe,[e("div",De,[e("div",Ie,[e("label",null,[qe,d(e("textarea",{"onUpdate:modelValue":s[4]||(s[4]=o=>t.input=o),class:"textarea",placeholder:"Whatever data you want to sign or verify",rows:"2"},null,512),[[h,t.input]])])])]),Ne,e("div",Oe,[e("button",{class:p(["button is-light is-fullwidth",{"is-success":t.tab==="SignatureCreate"}]),onClick:s[5]||(s[5]=o=>t.tab="SignatureCreate")}," Create Signature ",2)]),e("div",Me,[e("button",{class:p(["button is-light is-fullwidth",{"is-success":t.tab==="SignatureVerify"}]),onClick:s[6]||(s[6]=o=>t.tab="SignatureVerify")}," Verify Signature ",2)]),t.tab==="SignatureCreate"?(i(),K(a,{key:0,secretKey:t.secretKey,input:t.input,class:"column is-full"},null,8,["secretKey","input"])):t.tab==="SignatureVerify"?(i(),K($,{key:1,publicKey:t.publicKey,input:t.input,class:"column is-full"},null,8,["publicKey","input"])):l("",!0)])])):l("",!0)])])])}var Ge=g(se,[["render",Ue]]);export{Ge as default};
